<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ExamenDomino</name>
    </assembly>
    <members>
        <member name="T:ExamenDomino.ConservativePart">
            <summary>
            Represents a conservative participant in the game.
            Inherits from the Participant base class.
            </summary>
        </member>
        <member name="M:ExamenDomino.ConservativePart.MakeShift(ExamenDomino.DominoGame)">
            <summary>
            Performs a round of the game for the conservative participant.
            </summary>
            <param name="dominoGame">The current state of the game.</param>
            <returns>True if the round was successful, false otherwise.</returns>
        </member>
        <member name="M:ExamenDomino.ConservativePart.GetMaxPlayableTiles(System.Collections.Generic.List{ExamenDomino.DominoTile})">
            <summary>
            Gets the maximum playable domino tile from a list of playable tiles.
            </summary>
            <param name="playableFichas">List of playable domino tiles.</param>
            <returns>The maximum playable domino tile.</returns>
        </member>
        <member name="T:ExamenDomino.DominoGame">
            <summary>
            Represents a game of Domino.
            </summary>
        </member>
        <member name="P:ExamenDomino.DominoGame.StartValue">
            <summary>
            Gets the start value of the game.
            </summary>
        </member>
        <member name="P:ExamenDomino.DominoGame.EndValue">
            <summary>
            Gets the end value of the game.
            </summary>
        </member>
        <member name="P:ExamenDomino.DominoGame.LastTile">
            <summary>
            Gets the last tile of the game.
            </summary>
        </member>
        <member name="M:ExamenDomino.DominoGame.#ctor">
            <summary>
            Initializes a new instance of the DominoGame class.
            </summary>
        </member>
        <member name="M:ExamenDomino.DominoGame.#ctor(System.Collections.Generic.List{ExamenDomino.Participant})">
            <summary>
            Initializes a new instance of the DominoGame class with a list of participants.
            </summary>
            <param name="part">The list of participants.</param>
        </member>
        <member name="M:ExamenDomino.DominoGame.AddParticipants(ExamenDomino.Participant)">
            <summary>
            Adds a participant to the game.
            </summary>
            <param name="part">The participant to add.</param>
        </member>
        <member name="M:ExamenDomino.DominoGame.AddParticipants(System.Collections.Generic.List{ExamenDomino.Participant})">
            <summary>
            Adds a list of participants to the game.
            </summary>
            <param name="part">The list of participants to add.</param>
        </member>
        <member name="M:ExamenDomino.DominoGame.RemoveParticipantsAt(System.Int32)">
            <summary>
            Removes a participant from the game at the specified index.
            </summary>
            <param name="index">The index of the participant to remove.</param>
        </member>
        <member name="M:ExamenDomino.DominoGame.RemoveParticipant(ExamenDomino.Participant)">
            <summary>
            Removes a participant from the game.
            </summary>
            <param name="part">The participant to remove.</param>
        </member>
        <member name="M:ExamenDomino.DominoGame.StartGame">
            <summary>
            Starts the game.
            </summary>
        </member>
        <member name="M:ExamenDomino.DominoGame.DistributeTiles">
            <summary>
            Distributes the tiles among the participants.
            </summary>
        </member>
        <member name="M:ExamenDomino.DominoGame.PlayRound">
            <summary>
            Plays a round of the game.
            </summary>
        </member>
        <member name="M:ExamenDomino.DominoGame.SimulateGame">
            <summary>
            Simulates a game.
            </summary>
            <returns>The winner of the game.</returns>
        </member>
        <member name="M:ExamenDomino.DominoGame.EliminateLosingPlayers">
            <summary>
            Eliminates the losing players from the game.
            </summary>
        </member>
        <member name="M:ExamenDomino.DominoGame.AddTile(ExamenDomino.DominoTile)">
            <summary>
            Adds a tile to the game.
            </summary>
            <param name="dominoTile">The tile to add.</param>
        </member>
        <member name="T:ExamenDomino.DominoTile">
            <summary>
            Represents a domino tile with two faces.
            </summary>
        </member>
        <member name="P:ExamenDomino.DominoTile.UpperPart">
            <summary>
            Gets the value of the top face of the domino tile.
            </summary>
        </member>
        <member name="P:ExamenDomino.DominoTile.ButtonPart">
            <summary>
            Gets the value of the bottom face of the domino tile.
            </summary>
        </member>
        <member name="P:ExamenDomino.DominoTile.IsDouble">
            <summary>
            Gets a value indicating whether the domino tile is a double (i.e., both ends have the same value).
            </summary>
        </member>
        <member name="M:ExamenDomino.DominoTile.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ExamenDomino.DominoTile"/> class.
            </summary>
            <param name="upperPart">The value of the top face of the domino tile.</param>
            <param name="buttonPart">The value of the bottom face of the domino tile.</param>
            <exception cref="T:System.ArgumentException">Thrown when the values of the faces are not between 0 and 6.</exception>
        </member>
        <member name="T:ExamenDomino.ImpulsivePart">
            <summary>
            Represents an impulsive participant in the game.
            Inherits from the Participant base class.
            </summary>
        </member>
        <member name="M:ExamenDomino.ImpulsivePart.MakeShift(ExamenDomino.DominoGame)">
            <summary>
            Performs a round of the game for the impulsive participant.
            </summary>
            <param name="dominoGame">The current state of the game.</param>
            <returns>True if the round was successful, false otherwise.</returns>
        </member>
        <member name="M:ExamenDomino.ImpulsivePart.GetMaxPlayableDoubleTiles(System.Collections.Generic.List{ExamenDomino.DominoTile})">
            <summary>
            Gets the maximum playable domino tile from a list of playable tiles giving priority to doubles.
            </summary>
            <param name="playableTiles">List of playable domino tiles.</param>
            <returns>The maximum playable double domino tile otherwise the maximum domino tile.</returns>
        </member>
        <member name="T:ExamenDomino.Participant">
            <summary>
            Represents a participant in the game.
            This is an abstract class and cannot be instantiated directly.
            </summary>
        </member>
        <member name="P:ExamenDomino.Participant.Count">
            <summary>
            Gets the count of domino tiles the participant has.
            </summary>
        </member>
        <member name="P:ExamenDomino.Participant.IsEmpty">
            <summary>
            Gets a value indicating whether the participant has no domino tiles.
            </summary>
        </member>
        <member name="P:ExamenDomino.Participant.Name">
            <summary>
            Gets or sets the name of the participant.
            </summary>
        </member>
        <member name="P:ExamenDomino.Participant.Points">
            <summary>
            Gets or sets the points of the participant.
            </summary>
        </member>
        <member name="M:ExamenDomino.Participant.ReceiveTiles(ExamenDomino.DominoTile)">
            <summary>
            Adds a domino tile to the participant's list.
            </summary>
            <param name="dominoTile">The domino tile to add.</param>
        </member>
        <member name="M:ExamenDomino.Participant.CountPoints">
            <summary>
            Counts the points of the participant based on the domino tiles they have.
            </summary>
        </member>
        <member name="M:ExamenDomino.Participant.GetPlayableTiles(System.Int32,System.Int32)">
            <summary>
            Gets a list of domino tiles from the participant's list that can be played.
            </summary>
            <param name="startValue">The value of the start tile of the game.</param>
            <param name="endValue">The value of the end tile of the game.</param>
            <returns>A list of playable domino tiles.</returns>
        </member>
        <member name="M:ExamenDomino.Participant.RemoveTile(ExamenDomino.DominoTile)">
            <summary>
            Removes the specified domino tile from the participant's list.
            </summary>
            <param name="dominoTile">The domino tile to remove.</param>
            <returns>True if the domino tile was found and removed; otherwise, false.</returns>
        </member>
        <member name="M:ExamenDomino.Participant.ClearTiles">
            <summary>
            Removes all domino tiles from the participant's list.
            </summary>
        </member>
        <member name="M:ExamenDomino.Participant.MakeShift(ExamenDomino.DominoGame)">
            <summary>
            Performs a shift in the game for the participant.
            This is an abstract method and must be implemented in any class that directly inherits from Participant.
            </summary>
            <param name="dominoGame">The current state of the game.</param>
            <returns>True if the shift was successful, false in case of the Participant don't do any shift.</returns>
        </member>
        <member name="T:ExamenDomino.TilesAmount">
            <summary>
            Represents a list of domino tiles.
            </summary>
        </member>
        <member name="P:ExamenDomino.TilesAmount.Count">
            <summary>
            Gets the count of domino tiles in the list.
            </summary>
        </member>
        <member name="P:ExamenDomino.TilesAmount.First">
            <summary>
            Gets the first domino tile in the list, or null if the list is empty.
            </summary>
        </member>
        <member name="P:ExamenDomino.TilesAmount.Last">
            <summary>
            Gets the last domino tile in the list, or null if the list is empty.
            </summary>
        </member>
        <member name="M:ExamenDomino.TilesAmount.GetTileAt(System.Int32)">
            <summary>
            Gets the domino tile at the specified index.
            </summary>
            <param name="index">The index of the domino tile to get.</param>
            <returns>The domino tile at the specified index, or null if the index is out of range.</returns>
        </member>
        <member name="M:ExamenDomino.TilesAmount.RemoveTileAt(System.Int32)">
            <summary>
            Removes the domino tile at the specified index.
            </summary>
            <param name="index">The index of the domino tile to remove.</param>
        </member>
        <member name="M:ExamenDomino.TilesAmount.AddTile(ExamenDomino.DominoTile)">
            <summary>
            Adds a domino tile to the list.
            </summary>
            <param name="dominoTile">The domino tile to add.</param>
        </member>
        <member name="M:ExamenDomino.TilesAmount.IndexOf(ExamenDomino.DominoTile)">
            <summary>
            Gets the index of the specified domino tile in the list.
            </summary>
            <param name="dominoTile">The domino tile to locate in the list.</param>
            <returns>The index of the domino tile if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:ExamenDomino.TilesAmount.RemoveTile(ExamenDomino.DominoTile)">
            <summary>
            Removes the first occurrence of the specified domino tile from the list.
            </summary>
            <param name="dominoTile">The domino tile to remove from the list.</param>
        </member>
        <member name="M:ExamenDomino.TilesAmount.Shuffle">
            <summary>
            Shuffles the order of the domino tiles in the list.
            </summary>
        </member>
        <member name="M:ExamenDomino.TilesAmount.Clear">
            <summary>
            Removes all domino tiles from the list.
            </summary>
        </member>
        <member name="M:ExamenDomino.TilesAmount.SetDominoTiles">
            <summary>
            Sets the list to contain all possible domino tiles.
            </summary>
        </member>
    </members>
</doc>
